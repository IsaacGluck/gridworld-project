NAME: Ben Rothman, Jim Yuan, Isaac Gluck, Alicia Chen
TEAM NAME: gw450-psychic-octo-meme

git@github.com:IsaacGluck/gw45-psychic-octo-meme.git

APCS pd 8

HW35 -- GridWorld, Part 5

2014-05-01



Do you know?
Set 10

1. Where is the isValid method specified? Which classes provide an
implementation of this method?
	It's specified in the Grid interface. BoundedGrid and UnboundedGrid.

2. Which AbstractGrid methods call the isValid method? Why donâ€™t the
other methods need to call it?
	getValidAdjacentLocations(), the other methods call getValidAdjacentLocations() so they are indeirectly calling it.

3. Which methods of the Grid interface are called in the getNeighbors
method? Which classes provide implementations of these methods?
	getOccupiedAdjacentLocations() and get(). BoundedGrid and UnboundedGrid provide implementations of get().

4. Why must the get method, which returns an object of type E, be used in the
getEmptyAdjacentLocations method when this method returns
locations, not objects of type E?
	get() must be used to check if the adjecent tyles contain anything before that location can be added to the list of empty adjacent locations.

5. What would be the effect of replacing the constant Location.HALF_RIGHT
with Location.RIGHT in the two places where it occurs in the
getValidAdjacentLocations method?
	It would only check the four boxes on each side, it would skip the boxes diagonal of the corner.


Do you know?
Set 11

1.What ensures that a grid has at least one valid location? 
UnboundedGrid will always have one valid location because it has infinite valid locations. 
BoundedGrid's construct throws an error if either rows or column are 0 are less, so there must be at least a 1X1 grid
which would ensure one valid location.

2. How is the number of columns in the grid determined by the getNumCols method? What assumption
about the grid makes this possible? 
Since occupantArray is a 2D array, its a length of the array inside the first array (Col is inside Row). That Row will be non
null, which is guaranteed because of the constructor. 


3.  What are the requirements for a Location to be valid in a BoundedGrid? 
It must be between 0 and numRows (inclusive, exclusive) and 0 and numCols (inclusive, exclusive).

.........In the next four questions, let r = number of rows,c = number of columns, and n = number of occupied locations. 


4. What type is returned by the getOccupiedLocations method? What is the time complexity (Big-Oh) for this method? 
An ArrayList of Locations is returned. O(n).

5. What type is returned by the get method? What parameter is needed? What is the time complexity (Big-Oh) for this method?
Type E. It's whatever type BoundedGrid is cast to be of, and you need to say what location you want to get.
O(1).

6. What conditions may cause an exception to be thrown by the put method? What is the time complexity (Big-Oh) 
for this method? 
1.If the location isn't valid.
2. If you are trying to input a null object.
O(1)

7. What type is returned by the remove method? What happens when an attempt is made to remove an item from an 
empty location? What is the time complexity (Big-Oh) for this method?
Type E. It throws an IllegalArgumentException.
O(1).

8. Based on the answers to questions 4,5, 6, and 7, would you consider this an efficient implementation? 
Justify your answer. 
Yes I would because only one method has a Big-Oh greater than 1; everything else is running at the fastest speed possible. 
